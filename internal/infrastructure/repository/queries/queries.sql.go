// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db_queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createReferralCode = `-- name: CreateReferralCode :one
INSERT INTO referral_code (
    user_id, 
    code,
    expired_at
)
VALUES ($1, $2, $3)
RETURNING 
    id, 
    user_id, 
    code,
    expired_at
`

type CreateReferralCodeParams struct {
	UserID    uuid.UUID `json:"user_id"`
	Code      string    `json:"code"`
	ExpiredAt time.Time `json:"expired_at"`
}

type CreateReferralCodeRow struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Code      string    `json:"code"`
	ExpiredAt time.Time `json:"expired_at"`
}

func (q *Queries) CreateReferralCode(ctx context.Context, arg CreateReferralCodeParams) (CreateReferralCodeRow, error) {
	row := q.db.QueryRow(ctx, createReferralCode, arg.UserID, arg.Code, arg.ExpiredAt)
	var i CreateReferralCodeRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Code,
		&i.ExpiredAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO session (
    user_id, 
    refresh_token, 
    expired_at
)
VALUES ($1, $2, $3)
RETURNING 
    id, 
    user_id,
    refresh_token, 
    expired_at
`

type CreateSessionParams struct {
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiredAt    time.Time `json:"expired_at"`
}

type CreateSessionRow struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiredAt    time.Time `json:"expired_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (CreateSessionRow, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.RefreshToken, arg.ExpiredAt)
	var i CreateSessionRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ExpiredAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    referrer_id,
    hash_password
) VALUES (
    $1, $2, $3
)
RETURNING 
    id,
    username,
    referrer_id,
    hash_password
`

type CreateUserParams struct {
	Username     string     `json:"username"`
	ReferrerID   *uuid.UUID `json:"referrer_id"`
	HashPassword string     `json:"hash_password"`
}

type CreateUserRow struct {
	ID           uuid.UUID  `json:"id"`
	Username     string     `json:"username"`
	ReferrerID   *uuid.UUID `json:"referrer_id"`
	HashPassword string     `json:"hash_password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.ReferrerID, arg.HashPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ReferrerID,
		&i.HashPassword,
	)
	return i, err
}

const deleteReferralCodeByUserID = `-- name: DeleteReferralCodeByUserID :one
UPDATE 
    referral_code
SET 
    deleted_at = COALESCE(deleted_at, NOW())
WHERE 
    user_id = $1
RETURNING 
    deleted_at
`

func (q *Queries) DeleteReferralCodeByUserID(ctx context.Context, userID uuid.UUID) (*time.Time, error) {
	row := q.db.QueryRow(ctx, deleteReferralCodeByUserID, userID)
	var deleted_at *time.Time
	err := row.Scan(&deleted_at)
	return deleted_at, err
}

const deleteSessionByUserID = `-- name: DeleteSessionByUserID :one
UPDATE 
    session
SET 
    deleted_at = COALESCE(deleted_at, NOW())
WHERE 
    user_id = $1
RETURNING 
    deleted_at
`

func (q *Queries) DeleteSessionByUserID(ctx context.Context, userID uuid.UUID) (*time.Time, error) {
	row := q.db.QueryRow(ctx, deleteSessionByUserID, userID)
	var deleted_at *time.Time
	err := row.Scan(&deleted_at)
	return deleted_at, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE 
    users
SET 
    deleted_at = COALESCE(deleted_at, NOW())
WHERE 
    id = $1
RETURNING 
    deleted_at
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (*time.Time, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var deleted_at *time.Time
	err := row.Scan(&deleted_at)
	return deleted_at, err
}

const getUserByID = `-- name: GetUserByID :one

SELECT 
    u.id AS user_id, 
    u.username,
    u.referrer_id,
    u.hash_password,
    s.id AS session_id,
    s.refresh_token,
    s.expired_at AS session_expired_at,
    r.id AS referral_code_id,
    r.code AS referral_code,
    r.expired_at AS referral_code_expired_at
FROM
    users u 
LEFT JOIN session s ON u.id = s.user_id
LEFT JOIN referral_code r ON u.id = r.user_id 
WHERE 
    u.id = $1 
    AND s.deleted_at IS NULL 
    AND r.deleted_at IS NULL
`

type GetUserByIDRow struct {
	UserID                uuid.UUID  `json:"user_id"`
	Username              string     `json:"username"`
	ReferrerID            *uuid.UUID `json:"referrer_id"`
	HashPassword          string     `json:"hash_password"`
	SessionID             *uuid.UUID `json:"session_id"`
	RefreshToken          *string    `json:"refresh_token"`
	SessionExpiredAt      *time.Time `json:"session_expired_at"`
	ReferralCodeID        *uuid.UUID `json:"referral_code_id"`
	ReferralCode          *string    `json:"referral_code"`
	ReferralCodeExpiredAt *time.Time `json:"referral_code_expired_at"`
}

// queries.sql
func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.ReferrerID,
		&i.HashPassword,
		&i.SessionID,
		&i.RefreshToken,
		&i.SessionExpiredAt,
		&i.ReferralCodeID,
		&i.ReferralCode,
		&i.ReferralCodeExpiredAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT 
    u.id AS user_id, 
    u.username,
    u.referrer_id,
    u.hash_password,
    s.id AS session_id,
    s.refresh_token,
    s.expired_at AS session_expired_at,
    r.id AS referral_code_id,
    r.code AS referral_code,
    r.expired_at AS referral_code_expired_at
FROM
    users u 
LEFT JOIN session s ON u.id = s.user_id
LEFT JOIN referral_code r ON u.id = r.user_id 
WHERE 
    u.username = $1 
    AND s.deleted_at IS NULL 
    AND r.deleted_at IS NULL
`

type GetUserByUsernameRow struct {
	UserID                uuid.UUID  `json:"user_id"`
	Username              string     `json:"username"`
	ReferrerID            *uuid.UUID `json:"referrer_id"`
	HashPassword          string     `json:"hash_password"`
	SessionID             *uuid.UUID `json:"session_id"`
	RefreshToken          *string    `json:"refresh_token"`
	SessionExpiredAt      *time.Time `json:"session_expired_at"`
	ReferralCodeID        *uuid.UUID `json:"referral_code_id"`
	ReferralCode          *string    `json:"referral_code"`
	ReferralCodeExpiredAt *time.Time `json:"referral_code_expired_at"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.ReferrerID,
		&i.HashPassword,
		&i.SessionID,
		&i.RefreshToken,
		&i.SessionExpiredAt,
		&i.ReferralCodeID,
		&i.ReferralCode,
		&i.ReferralCodeExpiredAt,
	)
	return i, err
}

const getUserIDByReferralCode = `-- name: GetUserIDByReferralCode :one
SELECT 
    u.id AS user_id
FROM
    users u 
LEFT JOIN session s ON u.id = s.user_id
LEFT JOIN referral_code r ON u.id = r.user_id 
WHERE 
    r.code = $1 
    AND s.deleted_at IS NULL 
    AND r.deleted_at IS NULL
`

func (q *Queries) GetUserIDByReferralCode(ctx context.Context, code string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserIDByReferralCode, code)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const list = `-- name: List :many
SELECT 
    u.id AS user_id, 
    u.username,
    u.referrer_id,
    u.hash_password,
    s.id AS session_id,
    s.refresh_token,
    s.expired_at AS session_expired_at,
    r.id AS referral_code_id,
    r.code AS referral_code,
    r.expired_at AS referral_code_expired_at
FROM
    users u 
LEFT JOIN session s ON u.id = s.user_id
LEFT JOIN referral_code r ON u.id = r.user_id 
WHERE 
    u.id = ANY($3::UUID[])
    AND u.referrer_id = ANY($4::UUID[])
    AND s.deleted_at IS NULL 
    AND r.deleted_at IS NULL
LIMIT $1
OFFSET $2
`

type ListParams struct {
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
	UserIds     []uuid.UUID `json:"user_ids"`
	ReferrerIds []uuid.UUID `json:"referrer_ids"`
}

type ListRow struct {
	UserID                uuid.UUID  `json:"user_id"`
	Username              string     `json:"username"`
	ReferrerID            *uuid.UUID `json:"referrer_id"`
	HashPassword          string     `json:"hash_password"`
	SessionID             *uuid.UUID `json:"session_id"`
	RefreshToken          *string    `json:"refresh_token"`
	SessionExpiredAt      *time.Time `json:"session_expired_at"`
	ReferralCodeID        *uuid.UUID `json:"referral_code_id"`
	ReferralCode          *string    `json:"referral_code"`
	ReferralCodeExpiredAt *time.Time `json:"referral_code_expired_at"`
}

func (q *Queries) List(ctx context.Context, arg ListParams) ([]ListRow, error) {
	rows, err := q.db.Query(ctx, list,
		arg.Limit,
		arg.Offset,
		arg.UserIds,
		arg.ReferrerIds,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRow{}
	for rows.Next() {
		var i ListRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.ReferrerID,
			&i.HashPassword,
			&i.SessionID,
			&i.RefreshToken,
			&i.SessionExpiredAt,
			&i.ReferralCodeID,
			&i.ReferralCode,
			&i.ReferralCodeExpiredAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE 
    users
SET  
    username = $2,
    hash_password = $3
WHERE 
    id = $1
RETURNING 
    id,
    username,
    referrer_id,
    hash_password
`

type UpdateUserParams struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	HashPassword string    `json:"hash_password"`
}

type UpdateUserRow struct {
	ID           uuid.UUID  `json:"id"`
	Username     string     `json:"username"`
	ReferrerID   *uuid.UUID `json:"referrer_id"`
	HashPassword string     `json:"hash_password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Username, arg.HashPassword)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ReferrerID,
		&i.HashPassword,
	)
	return i, err
}
